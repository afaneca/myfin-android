plugins {
    id("com.android.application")
    id("kotlin-android")
    id("com.google.devtools.ksp")
    id("androidx.navigation.safeargs.kotlin")
    id("dagger.hilt.android.plugin")
    id("org.jetbrains.kotlin.plugin.parcelize")
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    ext.application_id = "com.afaneca.myfin"

    // semantic versioning
    def versionMajor = 2
    def versionMinor = 4
    def versionPatch = 0
    def versionBuild = 0

    defaultConfig {
        applicationId "$application_id"
        minSdkVersion 26
        compileSdk 35
        targetSdkVersion 35
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    flavorDimensions += "env"
    productFlavors {
        dev {
            dimension "env"
            applicationId application_id + ".dev"
            resValue "string", "app_name", "MyFin.dev"
            resValue "string", "default_api_base_url", "api.myfin.afaneca.com"
        }
        prod {
            dimension "env"
            applicationId application_id
            signingConfig signingConfigs.release
            resValue "string", "app_name", "MyFin"
            resValue "string", "default_api_base_url", "api.myfin.afaneca.com"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    androidResources {
        generateLocaleConfig true
    }

    buildFeatures {
        viewBinding true
    }

    namespace 'com.afaneca.myfin'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.core:core-ktx:1.16.0"
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha07'
    implementation("androidx.preference:preference-ktx:$preference_version")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // LifeCycle
    implementation "androidx.lifecycle:lifecycle-common:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    // DI - Dagger-hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    ksp("com.google.dagger:hilt-compiler:$hilt_version")

    // Json serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1")

    // Crypto (AES)
    implementation 'com.github.tozny:java-aes-crypto:1.1.0'

    // Charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // Room DB
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor "androidx.room:room-compiler:$room_version"
    ksp("androidx.room:room-compiler:$room_version")

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")
    // SQLCipher - to encrypt room db
    implementation "net.zetetic:sqlcipher-android:$sqlcipher_version"
    implementation 'androidx.sqlite:sqlite-ktx:2.5.0'

    // Biometrics
    implementation 'com.mikhaellopez:biometric:1.1.0'

    // Testing
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
}